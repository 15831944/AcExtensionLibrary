<?xml version="1.0" encoding="utf-8"?>
<topic id="2e20ed66-5a54-49ac-a91e-5e363857b004" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>Required introduction</para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>AcTransaction</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->

        <code language="cs">
          <![CDATA[
          namespace Autodesk.AutoCAD.DatabaseServices
{
    using Autodesk.AutoCAD.Runtime;
    using System;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;

    [Wrapper("AcTransaction")]
    public class Transaction : RXObject
    {
        protected internal Transaction(IntPtr unmanagedPointer, [MarshalAs(UnmanagedType.U1)] bool autoDelete) : base(unmanagedPointer, autoDelete)
        {
        }

        public virtual unsafe void Abort()
        {
            this.CheckTopTransaction();
            AcDbTransactionManager* modopt(CallConvCdecl) local1 = AcDbImpTransaction.transactionManager((AcDbImpTransaction* modopt(IsConst) modopt(IsConst)) this.GetImpObj());
            int num = (int) *local1[0][0x48L](local1);
            if (num != 0)
            {
                throw new Autodesk.AutoCAD.Runtime.Exception((Autodesk.AutoCAD.Runtime.ErrorStatus) num);
            }
            base.AutoDelete = false;
        }

        public virtual void AddNewlyCreatedDBObject(DBObject obj, [MarshalAs(UnmanagedType.U1)] bool add)
        {
            this.TransactionManager.AddNewlyCreatedDBObject(obj, add);
        }

        private unsafe void CheckTopTransaction()
        {
            AcDbTransactionManager* managerPtr = AcDbImpTransaction.transactionManager((AcDbImpTransaction* modopt(IsConst) modopt(IsConst)) this.GetImpObj());
            if (this.GetImpObj() != **(((long*) managerPtr))[0x58L](managerPtr))
            {
                throw new InvalidOperationException();
            }
        }

        public virtual unsafe void Commit()
        {
            this.CheckTopTransaction();
            AcDbTransactionManager* modopt(CallConvCdecl) local1 = AcDbImpTransaction.transactionManager((AcDbImpTransaction* modopt(IsConst) modopt(IsConst)) this.GetImpObj());
            int num = (int) *local1[0][0x40L](local1);
            if (num != 0)
            {
                throw new Autodesk.AutoCAD.Runtime.Exception((Autodesk.AutoCAD.Runtime.ErrorStatus) num);
            }
            base.AutoDelete = false;
        }

        protected override unsafe void DeleteUnmanagedObject()
        {
            this.CheckTopTransaction();
            AcDbTransactionManager* modopt(CallConvCdecl) local1 = AcDbImpTransaction.transactionManager((AcDbImpTransaction* modopt(IsConst) modopt(IsConst)) this.GetImpObj());
            int num = (int) *local1[0][0x48L](local1);
            if (num != 0)
            {
                throw new Autodesk.AutoCAD.Runtime.Exception((Autodesk.AutoCAD.Runtime.ErrorStatus) num);
            }
        }

        public unsafe DBObjectCollection GetAllObjects()
        {
            DBObjectCollection objects = new DBObjectCollection();
            AcTransaction* impObj = this.GetImpObj();
            int num = (int) **(((long*) impObj))[0x48L](impObj, objects.GetImpObj());
            if (num != 0)
            {
                throw new Autodesk.AutoCAD.Runtime.Exception((Autodesk.AutoCAD.Runtime.ErrorStatus) num);
            }
            return objects;
        }

        internal unsafe AcTransaction* GetImpObj()
        {
            return (AcTransaction*) base.GetImpObj();
        }

        public virtual unsafe DBObject GetObject(ObjectId id, Autodesk.AutoCAD.DatabaseServices.OpenMode mode)
        {
            this.CheckTopTransaction();
            return Autodesk.AutoCAD.DatabaseServices.TransactionManager.GetObjectInternal(AcDbImpTransaction.transactionManager((AcDbImpTransaction* modopt(IsConst) modopt(IsConst)) this.GetImpObj()), id, mode, false, false);
        }

        public virtual unsafe DBObject GetObject(ObjectId id, Autodesk.AutoCAD.DatabaseServices.OpenMode mode, [MarshalAs(UnmanagedType.U1)] bool openErased)
        {
            this.CheckTopTransaction();
            return Autodesk.AutoCAD.DatabaseServices.TransactionManager.GetObjectInternal(AcDbImpTransaction.transactionManager((AcDbImpTransaction* modopt(IsConst) modopt(IsConst)) this.GetImpObj()), id, mode, openErased, false);
        }

        public virtual unsafe DBObject GetObject(ObjectId id, Autodesk.AutoCAD.DatabaseServices.OpenMode mode, [MarshalAs(UnmanagedType.U1)] bool openErased, [MarshalAs(UnmanagedType.U1)] bool forceOpenOnLockedLayer)
        {
            this.CheckTopTransaction();
            return Autodesk.AutoCAD.DatabaseServices.TransactionManager.GetObjectInternal(AcDbImpTransaction.transactionManager((AcDbImpTransaction* modopt(IsConst) modopt(IsConst)) this.GetImpObj()), id, mode, openErased, forceOpenOnLockedLayer);
        }

        public virtual Autodesk.AutoCAD.DatabaseServices.TransactionManager TransactionManager
        {
            get
            {
                IntPtr unmanagedPointer = new IntPtr(AcDbImpTransaction.transactionManager((AcDbImpTransaction* modopt(IsConst) modopt(IsConst)) this.GetImpObj()));
                return (Autodesk.AutoCAD.DatabaseServices.TransactionManager) RXObject.Create(unmanagedPointer, false);
            }
        }
    }
}

          ]]>

        </code>
      </content>
    </section>

    <section address="AppTransaction">
      <title>AppTransaction</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->

        <code language="cs">
<![CDATA[namespace Autodesk.AutoCAD.ApplicationServices
{
    using Autodesk.AutoCAD.DatabaseServices;
    using System;
    using System.Runtime.InteropServices;

    internal sealed class AppTransaction : Transaction
    {
        private Autodesk.AutoCAD.ApplicationServices.TransactionManager m_mgr;

        protected internal AppTransaction(IntPtr unmanagedPointer, [MarshalAs(UnmanagedType.U1)] bool autoDelete, Autodesk.AutoCAD.ApplicationServices.TransactionManager mgr) : base(unmanagedPointer, autoDelete)
        {
            this.m_mgr = mgr;
        }

        public sealed override void Commit()
        {
            base.Commit();
            ((Autodesk.AutoCAD.ApplicationServices.TransactionManager) this.TransactionManager).FlushGraphics();
        }

        public override Autodesk.AutoCAD.DatabaseServices.TransactionManager TransactionManager
        {
            get
            {
                return this.m_mgr;
            }
        }
    }
}]]>


        </code>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID" />
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>